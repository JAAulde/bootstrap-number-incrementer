{"version":3,"sources":["number-incrementer.bootstrap.js","number-incrementer.bootstrap.min.js","templates.js"],"names":["context","parseInt","$","jQuery","template_manager","jQProp","fn","prop","jQAttr","attr","consts","CLASS_NAME_INPUT","CLASS_NAME_WRAPPER","NAMESPACE_EVENTS","DATA_PROPERTY_WIDGET_DATA","getWrapper","get","clone","setWrapperWidth","wrapper","min","max","len","input","find","options","data","width_factor","length","width","val","defaults","args","arguments","this","filter","each","apply","closest","return_value","indexOf","numberIncrementer","opts","value","min_value","max_value","isNaN","trigger","$m","p","widgetData","replaceWith","originals","Object","prototype","hasOwnProperty","call","off","removeData","removeClass","extend","not","type","css","text-align","addClass","on","operation","cache"],"mappings":"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","file":"number-incrementer.bootstrap.min.js","sourcesContent":["/* jslint */\n\n/**\n * @file A jQuery/Boostrap based widget for use on text and number inputs to\n *       turn them into Bootstrap input groups with plus and minus buttons for\n *       incrementing and decrementing the input's numeric value.\n * @version 1.0.0\n * @copyright Jim Auldridge <auldridgej@gmail.com> 2016\n * @license MIT\n * @see {@link https://github.com/JAAulde/bootstrap-number-incrementer|GitHub Repository}\n * @see {@link http://getbootstrap.com/|Bootstrap}\n * @see {@link https://jquery.com/|jQuery}\n */\n(function (context) {\n    'use strict';\n\n    var parseInt = context.parseInt,\n        $ = context.jQuery,\n        template_manager = context.template_manager,\n        jQProp = $.fn.prop,\n        jQAttr = $.fn.attr,\n        consts = {\n            CLASS_NAME_INPUT: 'bs-number-incremented',\n            CLASS_NAME_WRAPPER: 'bs-number-incrementer',\n            NAMESPACE_EVENTS: 'bs-number-incrementer',\n            DATA_PROPERTY_WIDGET_DATA: 'widgetData'\n        },\n        getWrapper = function () {\n            if (!getWrapper.$) {\n                getWrapper.$ = $(template_manager.get('partials/wrapper.html'));\n            }\n\n            return getWrapper.$.clone();\n        },\n        setWrapperWidth = function (wrapper) {\n            var input = wrapper.find('input.' + consts.CLASS_NAME_INPUT),\n                options = input.data(consts.DATA_PROPERTY_WIDGET_DATA).options,\n                min,\n                max,\n                len;\n\n            switch (options.width_factor) {\n            case 'range':\n                min = (input.attr('min') || '').length;\n                max = (input.attr('max') || '').length;\n                len = (min > max ? min : max) * 0.75;\n\n                wrapper.width((7 + (len || 1)) + 'em');\n                break;\n\n            case 'dynamic':\n                len = ((input.val() || '').length || 1);\n\n                wrapper.width((7 + len) + 'em');\n                break;\n\n            //default\n            //  style it yourself externally\n            }\n        },\n        defaults = {\n            width_factor: 'range' // 'range', 'dynamic', ALL OTHER\n        };\n\n    $.fn.prop = function () {\n        var args = arguments;\n\n        if (args.length === 2 && args[0] === 'disabled') {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this);\n                $.fn.prop.apply(input.closest('div.' + consts.CLASS_NAME_WRAPPER).find('button'), args);\n            });\n        }\n\n        return jQProp.apply(this, args);\n    };\n\n    $.fn.attr = function () {\n        var args = arguments,\n            return_value = jQAttr.apply(this, args);\n\n        if (args.length === 2 && (['min', 'max']).indexOf(args[0]) > -1) {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this);\n                setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n            });\n        }\n\n        return return_value;\n    };\n\n    $.fn.numberIncrementer = function (opts) {\n        switch (opts) {\n        case 'increment':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    min_value,\n                    max_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    min_value = parseInt(input.attr('min'), 10);\n                    if (!isNaN(min_value) && min_value > value) {\n                        input.val(min_value).trigger('change');\n                    } else {\n                        max_value = parseInt(input.attr('max'), 10);\n                        if (isNaN(max_value) || value < max_value) {\n                            input.val(value + 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'decrement':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    max_value,\n                    min_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    max_value = parseInt(input.attr('max'), 10);\n                    if (!isNaN(max_value) && value > max_value) {\n                        input.val(max_value).trigger('change');\n                    } else {\n                        min_value = parseInt(input.attr('min'), 10);\n                        if (isNaN(min_value) || min_value < value) {\n                            input.val(value - 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'destroy':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    widgetData = input.data(consts.DATA_PROPERTY_WIDGET_DATA),\n                    $m,\n                    p;\n\n                input.closest('div.' + consts.CLASS_NAME_WRAPPER).replaceWith(input);\n\n                for ($m in widgetData.originals) {\n                    if (Object.prototype.hasOwnProperty.call(widgetData.originals, $m)) {\n                        for (p in widgetData.originals[$m]) {\n                            if (Object.prototype.hasOwnProperty.call(widgetData.originals[$m], p)) {\n                                input[$m](p, widgetData.originals[$m][p]);\n                            }\n                        }\n                    }\n                }\n\n                input\n                    .off('change.' + consts.NAMESPACE_EVENTS)\n                    .removeData(consts.DATA_PROPERTY_WIDGET_DATA)\n                    .removeClass(consts.CLASS_NAME_INPUT);\n            });\n            break;\n        default:\n            var options = $.extend({}, defaults, (opts || {}));\n\n            this.filter('input[type=\"text\"], input[type=\"number\"]').not('.' + consts.CLASS_NAME_INPUT)\n                .each(function () {\n                    var input = $(this),\n                        wrapper = getWrapper(),\n                        widgetData = {\n                            originals: {\n                                attr: {\n                                    type: input.attr('type')\n                                },\n                                css: {\n                                    \"text-align\": (input.css('text-align') || 'start')\n                                }\n                            },\n                            options: options\n                        };\n\n                    input.replaceWith(wrapper);\n\n                    wrapper.find('span.bs-number-incremented-target:first').replaceWith(input);\n\n                    input\n                        .prop('disabled', input.prop('disabled'))\n                        .attr('type', 'text')\n                        .css('text-align', (options.width_factor === 'dynamic' ? 'center' : 'right'))\n                        .addClass(consts.CLASS_NAME_INPUT)\n                        .on('change.' + consts.NAMESPACE_EVENTS, function () {\n                            if (input.data(consts.DATA_PROPERTY_WIDGET_DATA).options.width_factor === 'dynamic') {\n                                setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n                            }\n                        })\n                        .data(consts.DATA_PROPERTY_WIDGET_DATA, widgetData);\n\n                    setWrapperWidth(wrapper);\n\n                    wrapper.find('button[data-operation]')\n                        .on('click', function () {\n                            var operation = $(this).data('operation');\n\n                            if ((['increment', 'decrement']).indexOf(operation) >= 0) {\n                                input.numberIncrementer(operation);\n                            }\n                        });\n                });\n            break;\n        }\n\n        return this;\n    };\n}(this));","/* jslint */\n\n/**\n * @file A jQuery/Boostrap based widget for use on text and number inputs to\n *       turn them into Bootstrap input groups with plus and minus buttons for\n *       incrementing and decrementing the input's numeric value.\n * @version 1.0.0\n * @copyright Jim Auldridge <auldridgej@gmail.com> 2016\n * @license MIT\n * @see {@link https://github.com/JAAulde/bootstrap-number-incrementer|GitHub Repository}\n * @see {@link http://getbootstrap.com/|Bootstrap}\n * @see {@link https://jquery.com/|jQuery}\n */\n(function (context) {\n    'use strict';\n\n    var parseInt = context.parseInt,\n        $ = context.jQuery,\n        template_manager = context.template_manager,\n        jQProp = $.fn.prop,\n        jQAttr = $.fn.attr,\n        consts = {\n            CLASS_NAME_INPUT: 'bs-number-incremented',\n            CLASS_NAME_WRAPPER: 'bs-number-incrementer',\n            NAMESPACE_EVENTS: 'bs-number-incrementer',\n            DATA_PROPERTY_WIDGET_DATA: 'widgetData'\n        },\n        getWrapper = function () {\n            if (!getWrapper.$) {\n                getWrapper.$ = $(template_manager.get('partials/wrapper.html'));\n            }\n\n            return getWrapper.$.clone();\n        },\n        setWrapperWidth = function (wrapper) {\n            var input = wrapper.find('input.' + consts.CLASS_NAME_INPUT),\n                options = input.data(consts.DATA_PROPERTY_WIDGET_DATA).options,\n                min,\n                max,\n                len;\n\n            switch (options.width_factor) {\n            case 'range':\n                min = (input.attr('min') || '').length;\n                max = (input.attr('max') || '').length;\n                len = (min > max ? min : max) * 0.75;\n\n                wrapper.width((7 + (len || 1)) + 'em');\n                break;\n\n            case 'dynamic':\n                len = ((input.val() || '').length || 1);\n\n                wrapper.width((7 + len) + 'em');\n                break;\n\n            //default\n            //  style it yourself externally\n            }\n        },\n        defaults = {\n            width_factor: 'range' // 'range', 'dynamic', ALL OTHER\n        };\n\n    $.fn.prop = function () {\n        var args = arguments;\n\n        if (args.length === 2 && args[0] === 'disabled') {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this);\n                $.fn.prop.apply(input.closest('div.' + consts.CLASS_NAME_WRAPPER).find('button'), args);\n            });\n        }\n\n        return jQProp.apply(this, args);\n    };\n\n    $.fn.attr = function () {\n        var args = arguments,\n            return_value = jQAttr.apply(this, args);\n\n        if (args.length === 2 && (['min', 'max']).indexOf(args[0]) > -1) {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this);\n                setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n            });\n        }\n\n        return return_value;\n    };\n\n    $.fn.numberIncrementer = function (opts) {\n        switch (opts) {\n        case 'increment':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    min_value,\n                    max_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    min_value = parseInt(input.attr('min'), 10);\n                    if (!isNaN(min_value) && min_value > value) {\n                        input.val(min_value).trigger('change');\n                    } else {\n                        max_value = parseInt(input.attr('max'), 10);\n                        if (isNaN(max_value) || value < max_value) {\n                            input.val(value + 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'decrement':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    max_value,\n                    min_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    max_value = parseInt(input.attr('max'), 10);\n                    if (!isNaN(max_value) && value > max_value) {\n                        input.val(max_value).trigger('change');\n                    } else {\n                        min_value = parseInt(input.attr('min'), 10);\n                        if (isNaN(min_value) || min_value < value) {\n                            input.val(value - 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'destroy':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    widgetData = input.data(consts.DATA_PROPERTY_WIDGET_DATA),\n                    $m,\n                    p;\n\n                input.closest('div.' + consts.CLASS_NAME_WRAPPER).replaceWith(input);\n\n                for ($m in widgetData.originals) {\n                    if (Object.prototype.hasOwnProperty.call(widgetData.originals, $m)) {\n                        for (p in widgetData.originals[$m]) {\n                            if (Object.prototype.hasOwnProperty.call(widgetData.originals[$m], p)) {\n                                input[$m](p, widgetData.originals[$m][p]);\n                            }\n                        }\n                    }\n                }\n\n                input\n                    .off('change.' + consts.NAMESPACE_EVENTS)\n                    .removeData(consts.DATA_PROPERTY_WIDGET_DATA)\n                    .removeClass(consts.CLASS_NAME_INPUT);\n            });\n            break;\n        default:\n            var options = $.extend({}, defaults, (opts || {}));\n\n            this.filter('input[type=\"text\"], input[type=\"number\"]').not('.' + consts.CLASS_NAME_INPUT)\n                .each(function () {\n                    var input = $(this),\n                        wrapper = getWrapper(),\n                        widgetData = {\n                            originals: {\n                                attr: {\n                                    type: input.attr('type')\n                                },\n                                css: {\n                                    \"text-align\": (input.css('text-align') || 'start')\n                                }\n                            },\n                            options: options\n                        };\n\n                    input.replaceWith(wrapper);\n\n                    wrapper.find('span.bs-number-incremented-target:first').replaceWith(input);\n\n                    input\n                        .prop('disabled', input.prop('disabled'))\n                        .attr('type', 'text')\n                        .css('text-align', (options.width_factor === 'dynamic' ? 'center' : 'right'))\n                        .addClass(consts.CLASS_NAME_INPUT)\n                        .on('change.' + consts.NAMESPACE_EVENTS, function () {\n                            if (input.data(consts.DATA_PROPERTY_WIDGET_DATA).options.width_factor === 'dynamic') {\n                                setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n                            }\n                        })\n                        .data(consts.DATA_PROPERTY_WIDGET_DATA, widgetData);\n\n                    setWrapperWidth(wrapper);\n\n                    wrapper.find('button[data-operation]')\n                        .on('click', function () {\n                            var operation = $(this).data('operation');\n\n                            if ((['increment', 'decrement']).indexOf(operation) >= 0) {\n                                input.numberIncrementer(operation);\n                            }\n                        });\n                });\n            break;\n        }\n\n        return this;\n    };\n}(this));\n(function(){\n\ttemplate_manager.cache('partials/wrapper.html','<div class=\"bs-number-incrementer\"><div class=\"input-group\"><span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" data-operation=\"decrement\"><span class=\"glyphicon glyphicon-minus\"></span></button> </span><span class=\"bs-number-incremented-target\"></span> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" data-operation=\"increment\"><span class=\"glyphicon glyphicon-plus\"></span></button></span></div></div>');\n})();",null],"sourceRoot":"/source/"}