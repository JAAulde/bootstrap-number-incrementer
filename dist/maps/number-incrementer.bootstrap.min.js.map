{"version":3,"sources":["number-incrementer.bootstrap.js","number-incrementer.bootstrap.min.js","templates.js"],"names":["context","parseInt","$","jQuery","template_manager","jQProp","fn","prop","jQAttr","attr","defaults","width_factor","wrapper_class","input_class","incrementer_class","decrementer_class","consts","CLASS_NAME_INPUT","CLASS_NAME_WRAPPER","NAMESPACE_EVENTS","DATA_PROPERTY_WIDGET_DATA","getWrapper","get","clone","setWrapperWidth","wrapper","min","max","len","input","find","options","data","length","width","val","buttonEnablement","buttons","disable_selectors","isNaN","push","closest","filter","join","args","arguments","this","each","apply","return_value","indexOf","widgetData","numberIncrementer","opts","value","min_value","max_value","trigger","$m","p","replaceWith","originals","Object","prototype","hasOwnProperty","call","off","removeData","extend","not","type","class","css","text-align","addClass","on","operation","cache"],"mappings":"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","file":"number-incrementer.bootstrap.min.js","sourcesContent":["/* jslint */\n\n/**\n * @file A jQuery/Boostrap based widget for use on text and number inputs to\n *       turn them into Bootstrap input groups with plus and minus buttons for\n *       incrementing and decrementing the input's numeric value.\n * @version 1.0.0\n * @copyright Jim Auldridge <auldridgej@gmail.com> 2016\n * @license MIT\n * @see {@link https://github.com/JAAulde/bootstrap-number-incrementer|GitHub Repository}\n * @see {@link http://getbootstrap.com/|Bootstrap}\n * @see {@link https://jquery.com/|jQuery}\n */\n(function (context) {\n    'use strict';\n\n    var parseInt = context.parseInt,\n        $ = context.jQuery,\n        template_manager = context.template_manager,\n        jQProp = $.fn.prop,\n        jQAttr = $.fn.attr,\n        defaults = {\n            width_factor: 'dynamic', // 'range', 'dynamic', ALL OTHER,\n            wrapper_class: null,\n            input_class: null,\n            incrementer_class: null,\n            decrementer_class: null\n        },\n        consts = {\n            CLASS_NAME_INPUT: 'bs-number-incremented',\n            CLASS_NAME_WRAPPER: 'bs-number-incrementer',\n            NAMESPACE_EVENTS: 'bs-number-incrementer',\n            DATA_PROPERTY_WIDGET_DATA: 'widgetData'\n        },\n        getWrapper = function () {\n            if (!getWrapper.$) {\n                getWrapper.$ = $(template_manager.get('partials/wrapper.html'));\n            }\n\n            return getWrapper.$.clone();\n        },\n        setWrapperWidth = function (wrapper) {\n            var input = wrapper.find('input.' + consts.CLASS_NAME_INPUT),\n                options = input.data(consts.DATA_PROPERTY_WIDGET_DATA).options,\n                min,\n                max,\n                len;\n\n            switch (options.width_factor) {\n            case 'range':\n                min = (input.attr('min') || '').length;\n                max = (input.attr('max') || '').length;\n                len = (min > max ? min : max) * 0.75;\n\n                wrapper.width((7 + (len || 1)) + 'em');\n                break;\n\n            case 'dynamic':\n                len = ((input.val() || '').length || 1);\n\n                wrapper.width((7 + len) + 'em');\n                break;\n\n            //default\n            //  style it yourself externally\n            }\n        },\n        buttonEnablement = function (input) {\n            var val = parseInt(input.val(), 10),\n                min,\n                max,\n                disable_selectors = [],\n                buttons;\n\n            if (!isNaN(val)) {\n                min = parseInt(input.attr('min'), 10);\n\n                if (!isNaN(min) && val <= min) {\n                    disable_selectors.push('[data-operation=\"decrement\"]');\n                }\n\n                max = parseInt(input.attr('max'), 10);\n\n                if (!isNaN(max) && val >= max) {\n                    disable_selectors.push('[data-operation=\"increment\"]');\n                }\n            }\n\n            buttons = input.closest('div.' + consts.CLASS_NAME_WRAPPER).find('button')\n                .prop('disabled', false);\n\n            if (disable_selectors.length) {\n                buttons.filter(disable_selectors.join(', '))\n                    .prop('disabled', true);\n            }\n        };\n\n    $.fn.prop = function () {\n        var args = arguments;\n\n        if (args.length === 2 && args[0] === 'disabled') {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this);\n\n                if (args[1] === true) {\n                    jQProp.apply(input.closest('div.' + consts.CLASS_NAME_WRAPPER).find('button'), args);\n                } else {\n                    buttonEnablement(input);\n                }\n            });\n        }\n\n        return jQProp.apply(this, args);\n    };\n\n    $.fn.attr = function () {\n        var args = arguments,\n            return_value = jQAttr.apply(this, args);\n\n        if (args.length === 2 && (['min', 'max']).indexOf(args[0]) > -1) {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    widgetData = input.data(consts.DATA_PROPERTY_WIDGET_DATA);\n\n                buttonEnablement(input);\n\n                if (widgetData.options.width_factor === 'range') {\n                    setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n                }\n            });\n        }\n\n        return return_value;\n    };\n\n    $.fn.numberIncrementer = function (opts) {\n        switch (opts) {\n        case 'increment':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    min_value,\n                    max_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    min_value = parseInt(input.attr('min'), 10);\n                    if (!isNaN(min_value) && min_value > value) {\n                        input.val(min_value).trigger('change');\n                    } else {\n                        max_value = parseInt(input.attr('max'), 10);\n                        if (isNaN(max_value) || value < max_value) {\n                            input.val(value + 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'decrement':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    max_value,\n                    min_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    max_value = parseInt(input.attr('max'), 10);\n                    if (!isNaN(max_value) && value > max_value) {\n                        input.val(max_value).trigger('change');\n                    } else {\n                        min_value = parseInt(input.attr('min'), 10);\n                        if (isNaN(min_value) || min_value < value) {\n                            input.val(value - 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'destroy':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    widgetData = input.data(consts.DATA_PROPERTY_WIDGET_DATA),\n                    $m,\n                    p;\n\n                input.closest('div.' + consts.CLASS_NAME_WRAPPER).replaceWith(input);\n\n                for ($m in widgetData.originals) {\n                    if (Object.prototype.hasOwnProperty.call(widgetData.originals, $m)) {\n                        for (p in widgetData.originals[$m]) {\n                            if (Object.prototype.hasOwnProperty.call(widgetData.originals[$m], p)) {\n                                input[$m](p, widgetData.originals[$m][p]);\n                            }\n                        }\n                    }\n                }\n\n                input\n                    .off('change.' + consts.NAMESPACE_EVENTS)\n                    .removeData(consts.DATA_PROPERTY_WIDGET_DATA);\n            });\n            break;\n        default:\n            var options = $.extend({}, defaults, (opts || {}));\n\n            this.filter('input[type=\"text\"], input[type=\"number\"]').not('.' + consts.CLASS_NAME_INPUT)\n                .each(function () {\n                    var input = $(this),\n                        wrapper = getWrapper(),\n                        buttons,\n                        widgetData = {\n                            originals: {\n                                attr: {\n                                    type: input.attr('type'),\n                                    \"class\": input.attr('class') || ''\n                                },\n                                css: {\n                                    \"text-align\": (input.css('text-align') || 'start')\n                                }\n                            },\n                            options: options\n                        };\n\n                    input.replaceWith(wrapper);\n\n                    wrapper.find('span.bs-number-incremented-target:first').replaceWith(input);\n\n                    input\n                        .prop('disabled', input.prop('disabled'))\n                        .attr('type', 'text')\n                        .css('text-align', (options.width_factor === 'dynamic' ? 'center' : 'right'))\n                        .addClass(consts.CLASS_NAME_INPUT + ' form-control')\n                        .on('change.' + consts.NAMESPACE_EVENTS, function () {\n                            if (input.data(consts.DATA_PROPERTY_WIDGET_DATA).options.width_factor === 'dynamic') {\n                                setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n                            }\n\n                            buttonEnablement(input);\n                        })\n                        .data(consts.DATA_PROPERTY_WIDGET_DATA, widgetData);\n\n                    buttonEnablement(input);\n\n                    setWrapperWidth(wrapper);\n\n                    buttons = wrapper.find('button[data-operation]')\n                        .on('click', function () {\n                            var operation = $(this).data('operation');\n\n                            if ((['increment', 'decrement']).indexOf(operation) >= 0) {\n                                input.numberIncrementer(operation);\n                            }\n                        });\n\n                    if (options.input_class) {\n                        input.addClass(options.input_class);\n                    }\n\n                    if (options.wrapper_class) {\n                        wrapper.addClass(options.wrapper_class);\n                    }\n\n                    if (options.incrementer_class) {\n                        buttons.filter('[data-operation=\"increment\"]')\n                            .addClass(options.incrementer_class);\n                    }\n\n                    if (options.decrementer_class) {\n                        buttons.filter('[data-operation=\"decrement\"]')\n                            .addClass(options.decrementer_class);\n                    }\n                });\n            break;\n        }\n\n        return this;\n    };\n}(this));","/* jslint */\n\n/**\n * @file A jQuery/Boostrap based widget for use on text and number inputs to\n *       turn them into Bootstrap input groups with plus and minus buttons for\n *       incrementing and decrementing the input's numeric value.\n * @version 1.0.0\n * @copyright Jim Auldridge <auldridgej@gmail.com> 2016\n * @license MIT\n * @see {@link https://github.com/JAAulde/bootstrap-number-incrementer|GitHub Repository}\n * @see {@link http://getbootstrap.com/|Bootstrap}\n * @see {@link https://jquery.com/|jQuery}\n */\n(function (context) {\n    'use strict';\n\n    var parseInt = context.parseInt,\n        $ = context.jQuery,\n        template_manager = context.template_manager,\n        jQProp = $.fn.prop,\n        jQAttr = $.fn.attr,\n        defaults = {\n            width_factor: 'dynamic', // 'range', 'dynamic', ALL OTHER,\n            wrapper_class: null,\n            input_class: null,\n            incrementer_class: null,\n            decrementer_class: null\n        },\n        consts = {\n            CLASS_NAME_INPUT: 'bs-number-incremented',\n            CLASS_NAME_WRAPPER: 'bs-number-incrementer',\n            NAMESPACE_EVENTS: 'bs-number-incrementer',\n            DATA_PROPERTY_WIDGET_DATA: 'widgetData'\n        },\n        getWrapper = function () {\n            if (!getWrapper.$) {\n                getWrapper.$ = $(template_manager.get('partials/wrapper.html'));\n            }\n\n            return getWrapper.$.clone();\n        },\n        setWrapperWidth = function (wrapper) {\n            var input = wrapper.find('input.' + consts.CLASS_NAME_INPUT),\n                options = input.data(consts.DATA_PROPERTY_WIDGET_DATA).options,\n                min,\n                max,\n                len;\n\n            switch (options.width_factor) {\n            case 'range':\n                min = (input.attr('min') || '').length;\n                max = (input.attr('max') || '').length;\n                len = (min > max ? min : max) * 0.75;\n\n                wrapper.width((7 + (len || 1)) + 'em');\n                break;\n\n            case 'dynamic':\n                len = ((input.val() || '').length || 1);\n\n                wrapper.width((7 + len) + 'em');\n                break;\n\n            //default\n            //  style it yourself externally\n            }\n        },\n        buttonEnablement = function (input) {\n            var val = parseInt(input.val(), 10),\n                min,\n                max,\n                disable_selectors = [],\n                buttons;\n\n            if (!isNaN(val)) {\n                min = parseInt(input.attr('min'), 10);\n\n                if (!isNaN(min) && val <= min) {\n                    disable_selectors.push('[data-operation=\"decrement\"]');\n                }\n\n                max = parseInt(input.attr('max'), 10);\n\n                if (!isNaN(max) && val >= max) {\n                    disable_selectors.push('[data-operation=\"increment\"]');\n                }\n            }\n\n            buttons = input.closest('div.' + consts.CLASS_NAME_WRAPPER).find('button')\n                .prop('disabled', false);\n\n            if (disable_selectors.length) {\n                buttons.filter(disable_selectors.join(', '))\n                    .prop('disabled', true);\n            }\n        };\n\n    $.fn.prop = function () {\n        var args = arguments;\n\n        if (args.length === 2 && args[0] === 'disabled') {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this);\n\n                if (args[1] === true) {\n                    jQProp.apply(input.closest('div.' + consts.CLASS_NAME_WRAPPER).find('button'), args);\n                } else {\n                    buttonEnablement(input);\n                }\n            });\n        }\n\n        return jQProp.apply(this, args);\n    };\n\n    $.fn.attr = function () {\n        var args = arguments,\n            return_value = jQAttr.apply(this, args);\n\n        if (args.length === 2 && (['min', 'max']).indexOf(args[0]) > -1) {\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    widgetData = input.data(consts.DATA_PROPERTY_WIDGET_DATA);\n\n                buttonEnablement(input);\n\n                if (widgetData.options.width_factor === 'range') {\n                    setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n                }\n            });\n        }\n\n        return return_value;\n    };\n\n    $.fn.numberIncrementer = function (opts) {\n        switch (opts) {\n        case 'increment':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    min_value,\n                    max_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    min_value = parseInt(input.attr('min'), 10);\n                    if (!isNaN(min_value) && min_value > value) {\n                        input.val(min_value).trigger('change');\n                    } else {\n                        max_value = parseInt(input.attr('max'), 10);\n                        if (isNaN(max_value) || value < max_value) {\n                            input.val(value + 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'decrement':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    value,\n                    max_value,\n                    min_value;\n\n                if (!input.prop('disabled')) {\n                    value = parseInt(input.val(), 10);\n                    if (isNaN(value)) {\n                        value = 0;\n                    }\n\n                    max_value = parseInt(input.attr('max'), 10);\n                    if (!isNaN(max_value) && value > max_value) {\n                        input.val(max_value).trigger('change');\n                    } else {\n                        min_value = parseInt(input.attr('min'), 10);\n                        if (isNaN(min_value) || min_value < value) {\n                            input.val(value - 1).trigger('change');\n                        }\n                    }\n                }\n            });\n            break;\n\n        case 'destroy':\n            this.filter('input.' + consts.CLASS_NAME_INPUT).each(function () {\n                var input = $(this),\n                    widgetData = input.data(consts.DATA_PROPERTY_WIDGET_DATA),\n                    $m,\n                    p;\n\n                input.closest('div.' + consts.CLASS_NAME_WRAPPER).replaceWith(input);\n\n                for ($m in widgetData.originals) {\n                    if (Object.prototype.hasOwnProperty.call(widgetData.originals, $m)) {\n                        for (p in widgetData.originals[$m]) {\n                            if (Object.prototype.hasOwnProperty.call(widgetData.originals[$m], p)) {\n                                input[$m](p, widgetData.originals[$m][p]);\n                            }\n                        }\n                    }\n                }\n\n                input\n                    .off('change.' + consts.NAMESPACE_EVENTS)\n                    .removeData(consts.DATA_PROPERTY_WIDGET_DATA);\n            });\n            break;\n        default:\n            var options = $.extend({}, defaults, (opts || {}));\n\n            this.filter('input[type=\"text\"], input[type=\"number\"]').not('.' + consts.CLASS_NAME_INPUT)\n                .each(function () {\n                    var input = $(this),\n                        wrapper = getWrapper(),\n                        buttons,\n                        widgetData = {\n                            originals: {\n                                attr: {\n                                    type: input.attr('type'),\n                                    \"class\": input.attr('class') || ''\n                                },\n                                css: {\n                                    \"text-align\": (input.css('text-align') || 'start')\n                                }\n                            },\n                            options: options\n                        };\n\n                    input.replaceWith(wrapper);\n\n                    wrapper.find('span.bs-number-incremented-target:first').replaceWith(input);\n\n                    input\n                        .prop('disabled', input.prop('disabled'))\n                        .attr('type', 'text')\n                        .css('text-align', (options.width_factor === 'dynamic' ? 'center' : 'right'))\n                        .addClass(consts.CLASS_NAME_INPUT + ' form-control')\n                        .on('change.' + consts.NAMESPACE_EVENTS, function () {\n                            if (input.data(consts.DATA_PROPERTY_WIDGET_DATA).options.width_factor === 'dynamic') {\n                                setWrapperWidth(input.closest('div.' + consts.CLASS_NAME_WRAPPER));\n                            }\n\n                            buttonEnablement(input);\n                        })\n                        .data(consts.DATA_PROPERTY_WIDGET_DATA, widgetData);\n\n                    buttonEnablement(input);\n\n                    setWrapperWidth(wrapper);\n\n                    buttons = wrapper.find('button[data-operation]')\n                        .on('click', function () {\n                            var operation = $(this).data('operation');\n\n                            if ((['increment', 'decrement']).indexOf(operation) >= 0) {\n                                input.numberIncrementer(operation);\n                            }\n                        });\n\n                    if (options.input_class) {\n                        input.addClass(options.input_class);\n                    }\n\n                    if (options.wrapper_class) {\n                        wrapper.addClass(options.wrapper_class);\n                    }\n\n                    if (options.incrementer_class) {\n                        buttons.filter('[data-operation=\"increment\"]')\n                            .addClass(options.incrementer_class);\n                    }\n\n                    if (options.decrementer_class) {\n                        buttons.filter('[data-operation=\"decrement\"]')\n                            .addClass(options.decrementer_class);\n                    }\n                });\n            break;\n        }\n\n        return this;\n    };\n}(this));\n(function(){\n\ttemplate_manager.cache('partials/wrapper.html','<div class=\"bs-number-incrementer\"><div class=\"input-group\"><span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" data-operation=\"decrement\"><span class=\"glyphicon glyphicon-minus\"></span></button> </span><span class=\"bs-number-incremented-target\"></span> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" data-operation=\"increment\"><span class=\"glyphicon glyphicon-plus\"></span></button></span></div></div>');\n})();",null],"sourceRoot":"/source/"}